scope = {
	unitX = vec3(1,0,0);
	unitY = vec3(0,1,0);
	unitZ = vec3(0,0,1);

	# Joint input
	j_torso_lift    = inputJoint("torso_lift_joint");

	j_shoulder_pan  = inputJoint("l_shoulder_pan_joint");
	j_shoulder_lift = inputJoint("l_shoulder_lift_joint");
	j_upper_arm_roll= inputJoint("l_upper_arm_roll_joint");
	j_elbow_flex    = inputJoint("l_elbow_flex_joint");
	j_forearm_roll  = inputJoint("l_forearm_roll_joint");
	j_wrist_flex    = inputJoint("l_wrist_flex_joint");
	j_wrist_roll    = inputJoint("l_wrist_roll_joint");
	j_gripper       = inputJoint("l_gripper_joint");



	# goal input
	#goal_frame = inputFrame("goal_frame");
	goal_pos = inputVec3("goal_pos");#goal_frame.pos;
	#goal_rot = goal_frame.rot;

	# Robot
	torso_lift     = frame(rotation(unitX, 0),                vec3(-0.05, 0, 0.739675 + j_torso_lift));
	
	shoulder_pan_l   = frame(rotation(unitZ, j_shoulder_pan),   vec3(0, 0.188, 0));
	shoulder_lift_l  = frame(rotation(unitY, j_shoulder_lift),  vec3(0.1, 0, 0));
	upper_arm_roll_l = frame(rotation(unitX, j_upper_arm_roll), vec3(0, 0, 0));
	elbow_flex_l     = frame(rotation(unitY, j_elbow_flex),     vec3(0.4, 0, 0));
	forearm_roll_l   = frame(rotation(unitX, j_forearm_roll),   vec3(0, 0, 0));
	wrist_flex_l     = frame(rotation(unitY, j_wrist_flex),     vec3(0.321, 0, 0));
	wrist_roll_l     = frame(rotation(unitX, j_wrist_roll),     vec3(0, 0, 0));
	gripper_offset_l = frame(rotation(unitX, 0),                vec3(0.18, 0, 0));

	# Frame chains
	elbow_l = torso_lift * shoulder_pan_l * shoulder_lift_l * upper_arm_roll_l * elbow_flex_l;
	gripper_l = elbow_l * forearm_roll_l * wrist_flex_l * wrist_roll_l * gripper_offset_l;

	goal_diff = goal_pos - gripper_l.pos;
	dist = norm(goal_diff);

	# Limits, weights and the like
	negVelLimitTorso = -0.02;
	posVelLimitTorso =  0.02;
	negVelLimitArm   = -0.6;
	posVelLimitArm   =  0.6;

	weightTorso = 0.001;
	weightArm   = 0.001;

	weightPositionGoal = 1;
	weightRotationGoal = 4;
	weightCollisionControl = 1000
}

controllableConstraints = {
	controllableConstraint(negVelLimitTorso, posVelLimitTorso, weightTorso, "torso_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_shoulder_pan_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_shoulder_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_upper_arm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_elbow_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_forearm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_wrist_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_wrist_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_gripper_joint")
}

softConstraints = {
	softConstraint(-dist, -dist, weightPositionGoal, dist, "dist slack")

}	

hardConstraints = {
	hardConstraint(0.0115 - j_torso_lift, 0.325 - j_torso_lift, j_torso_lift);
	
	# # Right arm constraints
	hardConstraint(-0.5646 - j_shoulder_pan,  2.1353 - j_shoulder_pan,   j_shoulder_pan);
	hardConstraint(-0.3536 - j_shoulder_lift, 1.2963 - j_shoulder_lift,  j_shoulder_lift);
	hardConstraint(-0.65   - j_upper_arm_roll,  3.75 - j_upper_arm_roll, j_upper_arm_roll);
	hardConstraint(-2.1213 - j_elbow_flex,     -0.15 - j_elbow_flex,     j_elbow_flex);
	hardConstraint(-2.0    - j_wrist_flex,      -0.1 - j_wrist_flex,     j_wrist_flex)
}